#include <stdio.h>

// Função para trocar dois elementos no array void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }

// Função para particionar o array e retornar o índice do pivô int partition(int arr[], int low, int high) { int pivot = arr[high]; // Pivô é o último elemento int i = (low - 1); // Índice do menor elemento

for (int j = low; j < high; j++) {
    // Se o elemento atual é menor ou igual ao pivô
    if (arr[j] <= pivot) {
        i++; // Incrementa o índice do menor elemento
        swap(&arr[i], &arr[j]);
    }
}
swap(&arr[i + 1], &arr[high]);
return (i + 1);
}

// Função principal do Quick Sort void quickSort(int arr[], int low, int high) { if (low < high) { // Encontra o índice do pivô tal que os elementos menores que o pivô estão à esquerda e os maiores à direita int pi = partition(arr, low, high);

    // Ordena as sublistas antes e depois do pivô
    quickSort(arr, low, pi - 1);
    quickSort(arr, pi + 1, high);
}
}

// Função para imprimir o array void printArray(int arr[], int size) { for (int i = 0; i < size; i++) printf("%d ", arr[i]); printf("\n"); }

int main() { int arr[] = {64, 34, 25, 12, 22, 11, 90}; int n = sizeof(arr) / sizeof(arr[0]);

printf("Array original:\n");
printArray(arr, n);

quickSort(arr, 0, n - 1);

printf("Array ordenado:\n");
printArray(arr, n);

return 0;
}
