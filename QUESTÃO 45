#include <stdio.h>

#define N 9

// Função para imprimir o tabuleiro do Sudoku void printBoard(int board[N][N]) { for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { printf("%d ", board[i][j]); } printf("\n"); } }

// Função para verificar se um número pode ser colocado na posição (linha, coluna) int isSafe(int board[N][N], int row, int col, int num) { // Verificar a linha for (int x = 0; x < N; x++) { if (board[row][x] == num) { return 0; } }

// Verificar a coluna
for (int x = 0; x < N; x++) {
    if (board[x][col] == num) {
        return 0;
    }
}

// Verificar o sub-quadrante 3x3
int startRow = row - row % 3;
int startCol = col - col % 3;
for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
        if (board[i + startRow][j + startCol] == num) {
            return 0;
        }
    }
}

return 1;
}

// Função para resolver o Sudoku usando backtracking int solveSudoku(int board[N][N]) { int row, col;

// Verificar se há uma célula vazia
int isEmpty = 0;
for (row = 0; row < N; row++) {
    for (col = 0; col < N; col++) {
        if (board[row][col] == 0) {
            isEmpty = 1;
            break;
        }
    }
    if (isEmpty) {
        break;
    }
}

// Se não houver célula vazia, o Sudoku está resolvido
if (!isEmpty) {
    return 1;
}

// Tentar todos os números de 1 a 9
for (int num = 1; num <= N; num++) {
    if (isSafe(board, row, col, num)) {
        // Atribuir num à célula
        board[row][col] = num;

        // Recursivamente tentar resolver o Sudoku
        if (solveSudoku(board)) {
            return 1;
        }

        // Se a solução não for encontrada, desfaça a atribuição
        board[row][col] = 0;
    }
}

// Se nenhum número é válido, retornar false
return 0;
}

int main() { int board[N][N] = { {5, 3, 0, 0, 7, 0, 0, 0, 0}, {6, 0, 0, 1, 9, 5, 0, 0, 0}, {0, 9, 8, 0, 0, 0, 0, 6, 0}, {8, 0, 0, 0, 6, 0, 0, 0, 3}, {4, 0, 0, 8, 0, 3, 0, 0, 1}, {7, 0, 0, 0, 2, 0, 0, 0, 6}, {0, 6, 0, 0, 0, 0, 2, 8, 0}, {0, 0, 0, 4, 1, 9, 0, 0, 5}, {0, 0, 0, 0, 8, 0, 0, 7, 9} };

printf("Tabuleiro do Sudoku inicial:\n");
printBoard(board);

if (solveSudoku(board)) {
    printf("\nTabuleiro do Sudoku resolvido:\n");
    printBoard(board);
} else {
    printf("\nNão foi possível resolver o Sudoku.\n");
}

return 0;
}

