#include <stdio.h> #include <stdlib.h>

#define MAX 100 // Tamanho máximo da pilha

// Estrutura para a pilha typedef struct { int top; int items[MAX]; } Stack;

// Função para inicializar a pilha void initStack(Stack *s) { s->top = -1; }

// Função para verificar se a pilha está cheia int isFull(Stack *s) { return s->top == MAX - 1; }

// Função para verificar se a pilha está vazia int isEmpty(Stack *s) { return s->top == -1; }

// Função para adicionar um item à pilha void push(Stack *s, int item) { if (isFull(s)) { printf("Pilha cheia! Não é possível adicionar o item %d.\n", item); return; } s->items[++(s->top)] = item; printf("Item %d adicionado à pilha.\n", item); }

// Função para remover um item da pilha int pop(Stack *s) { if (isEmpty(s)) { printf("Pilha vazia! Não é possível remover um item.\n"); return -1; // Valor de erro } return s->items[(s->top)--]; }

// Função para ver o item no topo da pilha sem removê-lo int peek(Stack *s) { if (isEmpty(s)) { printf("Pilha vazia! Não há itens para mostrar.\n"); return -1; // Valor de erro } return s->items[s->top]; }

// Função para exibir todos os itens da pilha void display(Stack *s) { if (isEmpty(s)) { printf("Pilha vazia!\n"); return; } printf("Itens na pilha:\n"); for (int i = s->top; i >= 0; i--) { printf("%d\n", s->items[i]); } }

int main() { Stack s; initStack(&s);

// Testando a pilha
push(&s, 10);
push(&s, 20);
push(&s, 30);
push(&s, 40);
push(&s, 50);

printf("Topo da pilha: %d\n", peek(&s));

display(&s);

printf("Item removido: %d\n", pop(&s));
printf("Item removido: %d\n", pop(&s));

display(&s);

return 0;
}
