#include <stdio.h>
#include <limits.h>

#define V 9 // Número de vértices no grafo

// Função para encontrar o vértice com a distância mínima
int minDistance(int dist[], int sptSet[]) {
    int min = INT_MAX;
    int min_index;

    for (int v = 0; v < V; v++) {
        if (!sptSet[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}

// Função para imprimir o array de distâncias
void printSolution(int dist[], int n) {
    printf("Vértice   Distância da origem\n");
    for (int i = 0; i < n; i++) {
        printf("%d \t\t %d\n", i, dist[i]);
    }
}

// Função para implementar o Algoritmo de Dijkstra
void dijkstra(int graph[V][V], int src) {
    int dist[V];    // Array para armazenar a menor distância de src para cada vértice
    int sptSet[V];  // Array para indicar se o vértice está incluído no conjunto de caminhos mais curtos

    // Inicializa as distâncias como infinito e sptSet como falso
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        sptSet[i] = 0;
    }

    // A distância do vértice de origem para ele mesmo é sempre 0
    dist[src] = 0;

    // Encontrar o caminho mais curto para todos os vértices
    for (int count = 0; count < V - 1; count++) {
        // Escolhe o vértice com a distância mínima do conjunto de vértices não processados
        int u = minDistance(dist, sptSet);

        // Marca o vértice como processado
        sptSet[u] = 1;

        // Atualiza o valor da distância dos vértices adjacentes ao vértice escolhido
        for (int v = 0; v < V; v++) {
            // Atualiza dist[v] se houver um caminho mais curto de u para v
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    // Imprime o array de distâncias
    printSolution(dist, V);
}

int main() {
    // Matriz de adjacência do grafo
    int graph[V][V] = {
        {0, 4, 0, 0, 0, 0, 0, 8, 0},
        {4, 0, 8, 0, 0, 0, 0, 11, 0},
        {0, 8, 0, 7, 0, 4, 0, 0, 2},
        {0, 0, 7, 0, 9, 14, 0, 0, 0},
        {0, 0, 0, 9, 0, 10, 0, 0, 0},
        {0, 0, 4, 14, 10, 0, 2, 0, 0},
        {0, 0, 0, 0, 0, 2, 0, 1, 6},
        {8, 11, 0, 0, 0, 0, 1, 0, 7},
        {0, 0, 2, 0, 0, 0, 6, 7, 0}
    };

    dijkstra(graph, 0);

    return 0;
}
