#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_LEN 1000

// Função para comprimir dados usando RLE
void compressRLE(const char *input, char *output) {
    int len = strlen(input);
    int count = 1;
    int j = 0;

    for (int i = 0; i < len; i++) {
        if (i < len - 1 && input[i] == input[i + 1]) {
            count++;
        } else {
            output[j++] = input[i];
            output[j++] = count + '0'; // Convertendo o número para caractere
            count = 1;
        }
    }
    output[j] = '\0'; // Finaliza a string de saída
}

// Função para descomprimir dados usando RLE
void decompressRLE(const char *input, char *output) {
    int len = strlen(input);
    int j = 0;

    for (int i = 0; i < len; i += 2) {
        char ch = input[i];
        int count = input[i + 1] - '0'; // Convertendo caractere para número

        for (int k = 0; k < count; k++) {
            output[j++] = ch;
        }
    }
    output[j] = '\0'; // Finaliza a string de saída
}

int main() {
    char input[MAX_LEN];
    char compressed[MAX_LEN];
    char decompressed[MAX_LEN];

    // Recebe a string de entrada
    printf("Digite a string para compressão: ");
    fgets(input, sizeof(input), stdin);
    input[strcspn(input, "\n")] = '\0'; // Remove o caractere de nova linha

    // Compressão
    compressRLE(input, compressed);
    printf("String comprimida: %s\n", compressed);

    // Descompressão
    decompressRLE(compressed, decompressed);
    printf("String descomprimida: %s\n", decompressed);

    return 0;
}

    return 0;
}


