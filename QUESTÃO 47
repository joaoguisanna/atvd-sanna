#include <stdio.h>
#include <stdlib.h>

// Estrutura para representar uma aresta
typedef struct {
    int src, dest, weight;
} Edge;

// Estrutura para representar um subconjunto para union-find
typedef struct {
    int parent, rank;
} Subset;

// Função para comparar duas arestas (para ordenação)
int compareEdges(const void* a, const void* b) {
    Edge* edgeA = (Edge*)a;
    Edge* edgeB = (Edge*)b;
    return edgeA->weight - edgeB->weight;
}

// Função para encontrar o representante de um subconjunto (find)
int find(Subset subsets[], int i) {
    if (subsets[i].parent != i) {
        subsets[i].parent = find(subsets, subsets[i].parent);
    }
    return subsets[i].parent;
}

// Função para unir dois subconjuntos (union)
void unionSubsets(Subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    if (subsets[xroot].rank < subsets[yroot].rank) {
        subsets[xroot].parent = yroot;
    } else if (subsets[xroot].rank > subsets[yroot].rank) {
        subsets[yroot].parent = xroot;
    } else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

// Função para implementar o Algoritmo de Kruskal
void kruskal(Edge edges[], int V, int E) {
    Edge result[V]; // Array para armazenar a MST
    int e = 0; // Contador para o número de arestas na MST
    int i = 0; // Índice para as arestas ordenadas

    // Ordenar todas as arestas em ordem crescente de peso
    qsort(edges, E, sizeof(Edge), compareEdges);

    // Criar V subconjuntos com um único elemento
    Subset subsets[V];
    for (int v = 0; v < V; ++v) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    // Adicionar arestas à MST
    while (e < V - 1 && i < E) {
        Edge nextEdge = edges[i++];
        int x = find(subsets, nextEdge.src);
        int y = find(subsets, nextEdge.dest);

        // Se a inclusão da aresta não formar um ciclo
        if (x != y) {
            result[e++] = nextEdge;
            unionSubsets(subsets, x, y);
        }
    }

    // Imprimir a MST
    printf("Arestas na Árvore Geradora Mínima:\n");
    int minimumCost = 0;
    for (i = 0; i < e; ++i) {
        printf("%d - %d: %d\n", result[i].src, result[i].dest, result[i].weight);
        minimumCost += result[i].weight;
    }
    printf("Custo total da Árvore Geradora Mínima: %d\n", minimumCost);
}

int main() {
    int V = 4; // Número de vértices
    int E = 5; // Número de arestas

    // Array de arestas (src, dest, peso)
    Edge edges[] = {
        {0, 1, 10},
        {0, 2, 6},
        {0, 3, 5},
        {1, 3, 15},
        {2, 3, 4}
    };

    kruskal(edges, V, E);

    return 0;
}
